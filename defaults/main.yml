---
# Netdata PPA gpg fingerprint
netdata_apt_gpg_fingerprint: "6588FDD7B14721FE7C3115E6F9177B5265F56346"

##### README #######
# Configuration values can  be any valid netdata configuration variable
# represented in json ( run as user = netdata --> run as user: netdata )

# Daemon general configuration
netdata_conf: {
  global: {
          # run as user: netdata,
          # timezone: Etc/UTC
          # host access prefix:
          # hostname: example.com
          # profile: standalone
          # glibc malloc arena max for plugins: 1
          # glibc malloc arena max for netdata: 1
          # cpu cores: 4
          # libuv worker threads: 24
          # OOM score: 0
          # process scheduling policy: batch
          # process nice level: 0
          # pthread stack size: 8MiB
          # is ephemeral node: no
          # has unstable connection: no
  },

# Netdata directories
  directories: {
        # config: /etc/netdata
        # stock config: /usr/lib/netdata/conf.d
        # log: /var/log/netdata
        # web: /usr/share/netdata/web
        # cache: /var/cache/netdata
        # lib: /var/lib/netdata
        # lock: /var/lib/netdata/lock
        # cloud.d: /var/lib/netdata/cloud.d
        # plugins: "/usr/libexec/netdata/plugins.d" "/etc/netdata/custom-plugins.d"
        # home: /var/lib/netdata
        # registry: /var/lib/netdata/registry
        # stock health config: /usr/lib/netdata/conf.d/health.d
        # health config: /etc/netdata/health.d}
  },

  # Database confgiguration
  db: {
        # enable replication: yes
        # replication period: 1d
        # replication step: 10m
        # cleanup orphan hosts after: 1h
        # update every: 1s
        # db: dbengine,
        # memory deduplication (ksm): auto
        # cleanup ephemeral hosts after: 1d
        # cleanup obsolete charts after: 1h
        # gap when lost iterations above: 1
        # dbengine page type: gorilla
        # dbengine page cache size: 32MiB
        # dbengine extent cache size: off
        # dbengine enable journal integrity check: no
        # dbengine use all ram for caches: no
        # dbengine out of memory protection: 1.55GiB
        # dbengine use direct io: yes
        # dbengine pages per extent: 109
        # storage tiers: 3,
        # dbengine tier backfill: new
        # dbengine tier 1 update every iterations: 60
        # dbengine tier 2 update every iterations: 60
        # dbengine tier 0 retention size: 1024MiB,
        # dbengine tier 0 retention time: 14d,
        # dbengine tier 1 retention size: 1024MiB
        # dbengine tier 1 retention time: 3mo,
        # dbengine tier 2 retention size: 1024MiB
        # dbengine tier 2 retention time: 2y
        # replication threads: 1
  },
  health: {
        # silencers file: /var/lib/netdata/health.silencers.json
        # enabled: yes
        # enable stock health configuration: yes
        # use summary for notifications: yes
        # default repeat warning: off
        # default repeat critical: off
        # in memory max health log entries: 1000
        # health log retention: 5d
        # script to execute on alarm: /usr/libexec/netdata/plugins.d/alarm-notify.sh
        # enabled alarms: *
        # run at least every: 10s
        # postpone alarms during hibernation for: 1m
  },
  web: {
        # ssl key: /etc/netdata/ssl/key.pem
        # ssl certificate: /etc/netdata/ssl/cert.pem
        # tls version: 1.3
        # tls ciphers: none
        # ses max tg_des_window: 15
        # des max tg_des_window: 15
        # mode: static-threaded
        # listen backlog: 4096
        # default port: 19999
        # bind to: *
        # bearer token protection: no
        # disconnect idle clients after: 1m
        # timeout for first request: 1m
        # accept a streaming request every: off
        # respect do not track policy: no
        # x-frame-options response header:
        # allow connections from: localhost *
        # allow connections by dns: heuristic
        # allow dashboard from: localhost *
        # allow dashboard by dns: heuristic
        # allow badges from: *
        # allow badges by dns: heuristic
        # allow streaming from: *
        # allow streaming by dns: heuristic
        # allow netdata.conf from: localhost fd* 10.* 192.168.* 172.16.* 172.17.* 172.18.* 172.19.* 172.20.* 172.21.* 172.22.* 172.23.* 172.24.* 172.25.* 172.26.* 172.27.* 172.28.* 172.29.* 172.30.* 172.31.* UNKNOWN
        # allow netdata.conf by dns: no
        # allow management from: localhost
        # allow management by dns: heuristic
        # enable gzip compression: yes
        # gzip compression strategy: default
        # gzip compression level: 3
        # ssl skip certificate verification: no
        # web server threads: 6
        # web server max sockets: 262144
  },
  registry: {
        # enabled: no
        # netdata unique id file: /var/lib/netdata/registry/netdata.public.unique.id
        # registry db file: /var/lib/netdata/registry/registry.db
        # registry log file: /var/lib/netdata/registry/registry-log.db
        # registry save db every new entries: 1000000
        # registry expire idle persons: 1y
        # registry domain:
        # registry to announce: https://registry.my-netdata.io
        # registry hostname: apt
        # verify browser cookies support: yes
        # enable cookies SameSite and Secure: yes
        # max URL length: 1024
        # max URL name length: 50
        # use mmap: no
        # netdata management api key file: /var/lib/netdata/netdata.api.key
        # allow from: *
        # allow by dns: heuristic
  },
  log: {
          # facility: daemon
          # logs flood protection period: 1m
          # logs to trigger flood protection: 1000
          # level: info
          # debug: /var/log/netdata/debug.log
          # daemon: journal
          # collector: journal
          # access: /var/log/netdata/access.log
          # health: journal
          # debug flags: 0x0000000000000000
  }
}

# Optionnal streaming option to centralize data

# Define client api key
# vault_netdata_client_key: "11111111-2222-3333-4444-555555555555"

# Define server api keys (in case you have several type of server to monitor)
# vault_netdata_server_keys: {
#   00000000-1111-2222-3333-444444444444: "ephemeral",
#   11111111-2222-3333-4444-555555555555: "replication"
# }


# Example of server configuration. Stream type name of can be anything
# you provide in the vault_netdata_server_keys.
# If host should receive data from others
# netdata_stream_type: {
#   ephemeral:
#     {
#       enabled: "yes",
#       history: "1h",
#       default memory: "ram",
#       health enabled: "auto",
#     },
#   replication:
#     {
#       enabled: "yes",
#       replication period: "1d",
#       replication step: "10m",
#       health enabled: "auto"
#     }
# }
# netdata_stream_type_custom1:
#  {
    # enabled: yes,
    # allow from: "*",
    # retention: 3600,
    # db: dbengine,
    # health enabled: auto,
    # postpone alerts on connect: 1m,
    # health log retention: 5d,
    # proxy enabled: yes | no,
    # proxy destination: IP:PORT IP:PORT ...,
    # proxy api key: API_KEY,
    # proxy send charts matching: "*",
    # enable compression: yes,
    # compression algorithms order: zstd lz4 brotli gzip,
    # enable replication: yes,
    # replication period: 1mo,
    # replication step: 10m,
    # is ephemeral node: no
#  }

# If host is client and should stream data to an other
# netdata_stream_conf: {
#   global: {
    # enabled: yes,
    # destination: detination,
    # api key: {{ vault_netdata_client_key }},
    # ssl skip certificate verification: yes
    # CApath:
    # CAfile:
    # enable compression: yes
    # timeout: 5m
    # default port: 19999
    # send charts matching: *
    # buffer size: 10MiB
    # reconnect delay: 15s
    # initial clock resync iterations: 60
  # }
